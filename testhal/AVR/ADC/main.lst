   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.rodata.str1.1,"aMS",@progbits,1
  12               	.LC0:
  13 0000 7269 7375 		.string	"risultato:"
  13      6C74 6174 
  13      6F3A 00
  14               	.LC1:
  15 000b 0A00      		.string	"\n"
  16               	.LC2:
  17 000d 2025 7800 		.string	" %x"
  18               		.section	.text.startup,"ax",@progbits
  19               	.global	main
  21               	main:
  22               	.LFB7:
  23               		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:main.c        ****                  2011,2012 Giovanni Di Sirio.
   4:main.c        **** 
   5:main.c        ****     This file is part of ChibiOS/RT.
   6:main.c        **** 
   7:main.c        ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:main.c        ****     it under the terms of the GNU General Public License as published by
   9:main.c        ****     the Free Software Foundation; either version 3 of the License, or
  10:main.c        ****     (at your option) any later version.
  11:main.c        **** 
  12:main.c        ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:main.c        ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:main.c        ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:main.c        ****     GNU General Public License for more details.
  16:main.c        **** 
  17:main.c        ****     You should have received a copy of the GNU General Public License
  18:main.c        ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:main.c        **** */
  20:main.c        **** 
  21:main.c        **** #include "ch.h"
  22:main.c        **** #include "hal.h"
  23:main.c        **** //#include "chprintf.h"
  24:main.c        **** 
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** /*
  28:main.c        ****  * Application entry point.
  29:main.c        ****  */
  30:main.c        **** int main(void) {
  24               		.loc 1 30 0
  25               		.cfi_startproc
  26 0000 CF93      		push r28
  27               	.LCFI0:
  28               		.cfi_def_cfa_offset 4
  29               		.cfi_offset 28, -3
  30 0002 DF93      		push r29
  31               	.LCFI1:
  32               		.cfi_def_cfa_offset 5
  33               		.cfi_offset 29, -4
  34 0004 1F92      		push __zero_reg__
  35               	.LCFI2:
  36               		.cfi_def_cfa_offset 6
  37 0006 CDB7      		in r28,__SP_L__
  38 0008 DEB7      		in r29,__SP_H__
  39               	.LCFI3:
  40               		.cfi_def_cfa_register 28
  41               	/* prologue: function */
  42               	/* frame size = 1 */
  43               	/* stack size = 3 */
  44               	.L__stack_usage = 3
  31:main.c        **** 
  32:main.c        ****   /*
  33:main.c        ****    * System initializations.
  34:main.c        ****    * - HAL initialization, this also initializes the configured device drivers
  35:main.c        ****    *   and performs the board-specific initializations.
  36:main.c        ****    * - Kernel initialization, the main() function becomes a thread and the
  37:main.c        ****    *   RTOS is active.
  38:main.c        ****    */
  39:main.c        **** 
  40:main.c        **** 
  41:main.c        ****   halInit();
  45               		.loc 1 41 0
  46 000a 0E94 0000 		call halInit
  47               	.LVL0:
  42:main.c        ****   chSysInit();
  48               		.loc 1 42 0
  49 000e 0E94 0000 		call chSysInit
  50               	.LVL1:
  43:main.c        **** 
  44:main.c        ****   /*
  45:main.c        ****    * Activates the serial driver 1 using the driver default configuration.
  46:main.c        ****    */
  47:main.c        ****   
  48:main.c        ****   palSetPadMode(IOPORT2, 0, PAL_MODE_OUTPUT_PUSHPULL);
  51               		.loc 1 48 0
  52 0012 46E0      		ldi r20,lo8(6)
  53 0014 61E0      		ldi r22,lo8(1)
  54 0016 83E2      		ldi r24,lo8(35)
  55 0018 90E0      		ldi r25,0
  56 001a 0E94 0000 		call _pal_lld_setgroupmode
  57               	.LVL2:
  49:main.c        ****   
  50:main.c        **** 	
  51:main.c        ****   sdStart(&SD1, NULL);
  58               		.loc 1 51 0
  59 001e 60E0      		ldi r22,0
  60 0020 70E0      		ldi r23,0
  61 0022 80E0      		ldi r24,lo8(SD1)
  62 0024 90E0      		ldi r25,hi8(SD1)
  63 0026 0E94 0000 		call sdStart
  64               	.LVL3:
  52:main.c        **** 
  53:main.c        ****   #define ADC_GRP1_NUM_CHANNELS   3
  54:main.c        ****   #define ADC_GRP1_BUF_DEPTH      10
  55:main.c        ****     DDRD |= _BV(DDD5);  
  65               		.loc 1 55 0
  66 002a 559A      		sbi 0xa,5
  56:main.c        ****     
  57:main.c        ****   static adcsample_t samples1[ADC_GRP1_NUM_CHANNELS * ADC_GRP1_BUF_DEPTH];
  58:main.c        ****   static const ADCConversionGroup adcgrpcfg1 = {
  59:main.c        ****     FALSE,
  60:main.c        ****     ADC_GRP1_NUM_CHANNELS,
  61:main.c        ****     NULL,
  62:main.c        ****     NULL,
  63:main.c        ****     0b00000111 //enabled channels
  64:main.c        ****   };
  65:main.c        **** 
  66:main.c        **** #if !defined(__AVR_ATmega644P__)
  67:main.c        ****   #warning non usare la configurazionebreadbord perche' otterresti un corto circuito
  68:main.c        **** #endif
  69:main.c        ****   
  70:main.c        ****   ADCConfig configurazioneBreadboard = {
  67               		.loc 1 70 0
  68 002c 81E0      		ldi r24,lo8(1)
  69 002e 8983      		std Y+1,r24
  71:main.c        ****     ANALOG_REFERENCE_AVCC //condensatore su aref. riferimento avcc
  72:main.c        ****   };
  73:main.c        **** 
  74:main.c        ****   adcStart(&ADCD1, &configurazioneBreadboard);
  70               		.loc 1 74 0
  71 0030 BE01      		movw r22,r28
  72 0032 6F5F      		subi r22,-1
  73 0034 7F4F      		sbci r23,-1
  74 0036 80E0      		ldi r24,lo8(ADCD1)
  75 0038 90E0      		ldi r25,hi8(ADCD1)
  76 003a 0E94 0000 		call adcStart
  77               	.LVL4:
  75:main.c        ****   
  76:main.c        ****   palSetGroupMode(IOPORT6, 0b00000111, 0, PAL_MODE_INPUT_PULLUP);
  78               		.loc 1 76 0
  79 003e 43E0      		ldi r20,lo8(3)
  80 0040 67E0      		ldi r22,lo8(7)
  81 0042 8FE2      		ldi r24,lo8(47)
  82 0044 90E0      		ldi r25,0
  83 0046 0E94 0000 		call _pal_lld_setgroupmode
  84               	.LVL5:
  85               	.LBB2:
  77:main.c        ****   
  78:main.c        **** 
  79:main.c        ****   while(1)
  80:main.c        ****   {
  81:main.c        ****      adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
  82:main.c        ****       
  83:main.c        ****      printf(&SD1,"risultato:");
  86               		.loc 1 83 0
  87 004a 80E0      		ldi r24,lo8(.LC0)
  88 004c 482E      		mov r4,r24
  89 004e 80E0      		ldi r24,hi8(.LC0)
  90 0050 582E      		mov r5,r24
  91 0052 90E0      		ldi r25,lo8(SD1)
  92 0054 E92E      		mov r14,r25
  93 0056 90E0      		ldi r25,hi8(SD1)
  94 0058 F92E      		mov r15,r25
  95               	.LBB3:
  96               	.LBB4:
  84:main.c        ****      for(int i = 0; i < ADC_GRP1_BUF_DEPTH*ADC_GRP1_NUM_CHANNELS;i++)
  85:main.c        ****      {
  86:main.c        ****        if(i%ADC_GRP1_NUM_CHANNELS ==0)
  97               		.loc 1 86 0
  98 005a 23E0      		ldi r18,lo8(3)
  99 005c A22E      		mov r10,r18
 100 005e B12C      		mov r11,__zero_reg__
  87:main.c        ****     	   printf(&SD1,"\n");
 101               		.loc 1 87 0
 102 0060 30E0      		ldi r19,lo8(.LC1)
 103 0062 832E      		mov r8,r19
 104 0064 30E0      		ldi r19,hi8(.LC1)
 105 0066 932E      		mov r9,r19
  88:main.c        ****        adcsample_t  temp = samples1[i];
  89:main.c        ****        printf(&SD1," %x", temp);
 106               		.loc 1 89 0
 107 0068 40E0      		ldi r20,lo8(.LC2)
 108 006a C42E      		mov r12,r20
 109 006c 40E0      		ldi r20,hi8(.LC2)
 110 006e D42E      		mov r13,r20
  87:main.c        ****     	   printf(&SD1,"\n");
 111               		.loc 1 87 0
 112 0070 1701      		movw r2,r14
 113               	.L5:
 114               	.LBE4:
 115               	.LBE3:
  81:main.c        ****      adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
 116               		.loc 1 81 0
 117 0072 2AE0      		ldi r18,lo8(10)
 118 0074 30E0      		ldi r19,0
 119 0076 40E0      		ldi r20,lo8(samples1.2330)
 120 0078 50E0      		ldi r21,hi8(samples1.2330)
 121 007a 60E0      		ldi r22,lo8(adcgrpcfg1.2331)
 122 007c 70E0      		ldi r23,hi8(adcgrpcfg1.2331)
 123 007e 80E0      		ldi r24,lo8(ADCD1)
 124 0080 90E0      		ldi r25,hi8(ADCD1)
 125 0082 0E94 0000 		call adcConvert
 126               	.LVL6:
  83:main.c        ****      printf(&SD1,"risultato:");
 127               		.loc 1 83 0
 128 0086 5F92      		push r5
 129 0088 4F92      		push r4
 130 008a FF92      		push r15
 131 008c EF92      		push r14
 132 008e 0E94 0000 		call printf
 133               	.LVL7:
 134 0092 00E0      		ldi r16,lo8(samples1.2330)
 135 0094 10E0      		ldi r17,hi8(samples1.2330)
 136 0096 0F90      		pop __tmp_reg__
 137 0098 0F90      		pop __tmp_reg__
 138 009a 0F90      		pop __tmp_reg__
 139 009c 0F90      		pop __tmp_reg__
 140               	.LBB7:
  84:main.c        ****      for(int i = 0; i < ADC_GRP1_BUF_DEPTH*ADC_GRP1_NUM_CHANNELS;i++)
 141               		.loc 1 84 0
 142 009e 612C      		mov r6,__zero_reg__
 143 00a0 712C      		mov r7,__zero_reg__
 144 00a2 00C0      		rjmp .L4
 145               	.LVL8:
 146               	.L2:
 147               	.LBB5:
  88:main.c        ****        adcsample_t  temp = samples1[i];
 148               		.loc 1 88 0
 149 00a4 F801      		movw r30,r16
 150 00a6 8081      		ld r24,Z
 151 00a8 9181      		ldd r25,Z+1
 152 00aa 0E5F      		subi r16,-2
 153 00ac 1F4F      		sbci r17,-1
 154               	.LVL9:
 155               		.loc 1 89 0
 156 00ae 9F93      		push r25
 157 00b0 8F93      		push r24
 158 00b2 DF92      		push r13
 159 00b4 CF92      		push r12
 160 00b6 FF92      		push r15
 161 00b8 EF92      		push r14
 162 00ba 0E94 0000 		call printf
 163               	.LVL10:
 164               	.LBE5:
  84:main.c        ****      for(int i = 0; i < ADC_GRP1_BUF_DEPTH*ADC_GRP1_NUM_CHANNELS;i++)
 165               		.loc 1 84 0
 166 00be FFEF      		ldi r31,-1
 167 00c0 6F1A      		sub r6,r31
 168 00c2 7F0A      		sbc r7,r31
 169               	.LVL11:
 170 00c4 0F90      		pop __tmp_reg__
 171 00c6 0F90      		pop __tmp_reg__
 172 00c8 0F90      		pop __tmp_reg__
 173 00ca 0F90      		pop __tmp_reg__
 174 00cc 0F90      		pop __tmp_reg__
 175 00ce 0F90      		pop __tmp_reg__
 176 00d0 8EE1      		ldi r24,30
 177 00d2 6816      		cp r6,r24
 178 00d4 7104      		cpc r7,__zero_reg__
 179 00d6 01F0      		breq .L7
 180               	.LVL12:
 181               	.L4:
 182               	.LBB6:
  86:main.c        ****        if(i%ADC_GRP1_NUM_CHANNELS ==0)
 183               		.loc 1 86 0
 184 00d8 C301      		movw r24,r6
 185 00da B501      		movw r22,r10
 186 00dc 0E94 0000 		call __divmodhi4
 187 00e0 892B      		or r24,r25
 188 00e2 01F4      		brne .L2
  87:main.c        ****     	   printf(&SD1,"\n");
 189               		.loc 1 87 0
 190 00e4 9F92      		push r9
 191 00e6 8F92      		push r8
 192 00e8 FF92      		push r15
 193 00ea EF92      		push r14
 194 00ec 0E94 0000 		call printf
 195               	.LVL13:
 196 00f0 0F90      		pop __tmp_reg__
 197 00f2 0F90      		pop __tmp_reg__
 198 00f4 0F90      		pop __tmp_reg__
 199 00f6 0F90      		pop __tmp_reg__
 200 00f8 00C0      		rjmp .L2
 201               	.L7:
 202               	.LBE6:
 203               	.LBE7:
  90:main.c        ****        
  91:main.c        ****      }
  92:main.c        ****      
  93:main.c        ****      printf(&SD1,"\n");
 204               		.loc 1 93 0
 205 00fa 9F92      		push r9
 206 00fc 8F92      		push r8
 207 00fe 3F92      		push r3
 208 0100 2F92      		push r2
 209 0102 0E94 0000 		call printf
 210               	.LVL14:
  94:main.c        ****       chThdSleepMilliseconds(500);
 211               		.loc 1 94 0
 212 0106 81E7      		ldi r24,lo8(113)
 213 0108 92E0      		ldi r25,lo8(2)
 214 010a 0E94 0000 		call chThdSleep
 215               	.LVL15:
  95:main.c        **** 	palTogglePad(IOPORT2, 0);
 216               		.loc 1 95 0
 217 010e 85B1      		in r24,0x5
 218 0110 91E0      		ldi r25,lo8(1)
 219 0112 8927      		eor r24,r25
 220 0114 85B9      		out 0x5,r24
 221               	.LBE2:
  96:main.c        **** 	
  97:main.c        **** 
  98:main.c        ****     
  99:main.c        ****   }
 222               		.loc 1 99 0
 223 0116 0F90      		pop __tmp_reg__
 224 0118 0F90      		pop __tmp_reg__
 225 011a 0F90      		pop __tmp_reg__
 226 011c 0F90      		pop __tmp_reg__
 227 011e 00C0      		rjmp .L5
 228               		.cfi_endproc
 229               	.LFE7:
 231               		.local	samples1.2330
 232               		.comm	samples1.2330,60,1
 233               		.section	.rodata
 236               	adcgrpcfg1.2331:
 237 0000 00        		.byte	0
 238 0001 0300      		.word	3
 239 0003 0000      		.word	0
 240 0005 0000      		.word	0
 241 0007 07        		.byte	7
 242               		.text
 243               	.Letext0:
 244               		.file 2 "/cygdrive/c/Program Files/WinAVR/lib/gcc/avr/4.8.1/include/stddef.h"
 245               		.file 3 "/cygdrive/c/Program Files/WinAVR/avr/include/stdint.h"
 246               		.file 4 "../../../os/ports/GCC/AVR/chtypes.h"
 247               		.file 5 "../../../os/kernel/include/chlists.h"
 248               		.file 6 "../../../os/kernel/include/chthreads.h"
 249               		.file 7 "../../../os/ports/GCC/AVR/chcore.h"
 250               		.file 8 "../../../os/kernel/include/chmtx.h"
 251               		.file 9 "../../../os/kernel/include/chevents.h"
 252               		.file 10 "../../../os/kernel/include/chqueues.h"
 253               		.file 11 "../../../os/hal/platforms/AVR/pal_lld.h"
 254               		.file 12 "../../../os/hal/include/adc.h"
 255               		.file 13 "../../../os/hal/platforms/AVR/adc_lld.h"
 256               		.file 14 "../../../os/hal/include/serial.h"
 257               		.file 15 "../../../os/hal/platforms/AVR/serial_lld.h"
 258               		.file 16 "<built-in>"
 259               		.file 17 "../../../os/hal/include/hal.h"
 260               		.file 18 "../../../os/kernel/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
/cygdrive/c/Users/BHDMinh/AppData/Local/Temp/ccbfypOa.s:2      *ABS*:0000003e __SP_H__
/cygdrive/c/Users/BHDMinh/AppData/Local/Temp/ccbfypOa.s:3      *ABS*:0000003d __SP_L__
/cygdrive/c/Users/BHDMinh/AppData/Local/Temp/ccbfypOa.s:4      *ABS*:0000003f __SREG__
/cygdrive/c/Users/BHDMinh/AppData/Local/Temp/ccbfypOa.s:5      *ABS*:0000003b __RAMPZ__
/cygdrive/c/Users/BHDMinh/AppData/Local/Temp/ccbfypOa.s:6      *ABS*:00000000 __tmp_reg__
/cygdrive/c/Users/BHDMinh/AppData/Local/Temp/ccbfypOa.s:7      *ABS*:00000001 __zero_reg__
/cygdrive/c/Users/BHDMinh/AppData/Local/Temp/ccbfypOa.s:21     .text.startup:00000000 main
                             .bss:00000000 samples1.2330
/cygdrive/c/Users/BHDMinh/AppData/Local/Temp/ccbfypOa.s:236    .rodata:00000000 adcgrpcfg1.2331

UNDEFINED SYMBOLS
halInit
chSysInit
_pal_lld_setgroupmode
SD1
sdStart
ADCD1
adcStart
adcConvert
printf
__divmodhi4
chThdSleep
__do_copy_data
__do_clear_bss
